#!/usr/bin/env ruby

# Usage: govuk_uptime_collector <environment> <service ...>

require "csv"
require "fileutils"
require "net/http"
require "time"
require "statsd"

class Collector
  def initialize(service_details, environment, aws)
    extract_service_details(service_details)
    @statsd = Statsd.new("127.0.0.1")
    @environment = environment
    @aws = aws
  end

  def call
    while true
      send_to_statsd(check_service_up)
      sleep 5
    end
  end

private

  attr_reader :statsd, :service_name, :environment, :aws, :healthcheck_path

  def extract_service_details(details)
    details = details.split(':')
    @service_name = details[0]
    @healthcheck_path = details[1] || 'healthcheck'
  end

  def healthcheck_uri
    @healthcheck_uri ||= begin
      if aws
        URI("https://#{service_name}.#{environment}.govuk.digital/healthcheck/live")
      else
        prefix = environment == "production" ? "#{service_name}" : "#{service_name}.#{environment}"
        URI("https://#{prefix}.publishing.service.gov.uk/#{healthcheck_path}")
      end
    end
  end

  def check_service_up
    http = Net::HTTP.new(healthcheck_uri.host, healthcheck_uri.port)
    http.use_ssl = true
    http.read_timeout = 20

    request = Net::HTTP::Head.new(healthcheck_uri.request_uri)
    request['User-Agent'] = 'govuk_uptime_collector'
    res = http.request(request)

    status_code = res.code.to_i
    (200..299).include? status_code
  end

  def statsd_key
    @statsd_key ||= "uptime.#{service_name}"
  end

  def send_to_statsd(status)
    statsd.gauge(statsd_key, status ? 1 : 0)
  end
end

def main
  threads = []

  environment = ARGV[0]
  aws = ARGV[1] == 'true' ? true : false

  ARGV[2..-1].each do |service_details|
    threads << Thread.new do
      Collector.new(service_details, environment, aws).call
    end
  end

  threads.each(&:join)
end

main
