#!/opt/python2.7/bin/python

##########################################################
# This script will cpture and report on AWS ElastiCache #
# FreeableMemory         	                         #
##########################################################

###########################################################
# Objective                                               #
# ---------                                               #
# This script performs the following steps.               #
# 1) Check whether a valid AWS region is specified        #
# 2) Check whether the redis instance ID provided exisits.#
# 3) If 1 and 2 are correct, check whether the average    #
#    FreeableMemory is in the WARNING or CRITICAL state.  #
#    Else, mark the status as OK.                         #
###########################################################

###############################################################################
# How to use and test this script?                                            #
# --------------------------------                                            #
#                                                                             #
# This script takes input from the following file when it is used by icinga.  #
# /etc/icinga/conf.d/icinga_host_ip-10-2-5-245.eu-west-1.compute.internal/    #
# check_aws_cache_memory.cfg                                                  #
#                                                                             #
# The script takes 4 input variables.                                         #
# 1) AWS Region. This is called with '-r'                                     #
# 2) Icinga warning value. This is called with '-w'                           #
# 3) Icinga critical vale. This is called with '-c'                           #
# 4) The AWS Redis Instance name. This is called with '-i'                    #
#                                                                             #
# Test                                                                        #
# ----                                                                        #
# You can test this script by following the steps below.                      #
#                                                                             #
# 1) Connect to the 'blue-monitoring' instance via ssh.                       #
# 2) Become root. (sudo -i)                                                   #
# 3) Change directory. (cd /usr/lib/nagios/plugins)                           #
# 4) Execute the script with manual input.                                    #
#    -r = eu-west-1  (Example AWS Staging region)                             #
#    -i = blue-backend-redis-001 (Example. This instance should be present)   #
#                                                                             #
#    python check_aws_cache_memory -r eu-west-1 -i blue-backend-redis-001     #
#                                                                             #
#                                                                             #
# The result should look like the example below.                              #
# OK: Current AWS:RDS CPU Utilization for blue-postgresql-primary is 0.4169%  #
###############################################################################

####################
# Imported modules #
####################
import sys
import argparse
import pprint
import boto.rds
import boto.elasticache
import boto.ec2.cloudwatch
import boto3
import datetime

#################################
# Passing acceptable parameters #
#################################
parser = argparse.ArgumentParser()
parser.add_argument("-r","--region", type=str, choices=['us-east-1','eu-west-1'], help="AWS region to check")
parser.add_argument("-w","--warning", type=float, help="Value(GB) at which to raise a warning alert (8.0)", default=8.0)
parser.add_argument("-c","--critical", type=float, help="Value(GB) at which to raise a critical alert (9.0)", default=9.0)
parser.add_argument("-i","--instanceid", type=str, help="Instanceid", default=0)
args = parser.parse_args()

############################################
# Check whether a region has been provided.#
############################################
if args.region is None:
    print "UNKNOWN: You have not supplied a region to connect to!"
    sys.exit(3)

#########################################################
# Initiate a connection to the AWS ElastiCache Cluster.#
#########################################################
elasticache = boto.elasticache.connect_to_region(args.region)

#########################################################
# Initiate a connection to the AWS ElastiCache Cluster.#
#########################################################
try:
 cluster_info = elasticache.describe_cache_clusters(args.instanceid)
except boto.exception.BotoServerError as err:
 print "There was an error while initiating a connection to the Elastic Cache Cluster. Please check the error message below. [cluster_info = elasticache.describe_cache_clusters(args.instanceid)]",err
 sys.exit(3)

#################################################################################
# Debug AWS ElastiCache Cluster Details.					#
#################################################################################
# To view the cluster and member details, uncomment the two lines below		#
#										#
# cluster_info = elasticache.describe_cache_clusters()[				#
#                'DescribeCacheClustersResponse'][				#
#                'DescribeCacheClustersResult'][				#
#                'CacheClusters']						#
# pprint.pprint(cluster_info)							#
#										#
# To view the details for a specific member, you can use index numbers. For 	#				
# example [0] is will match the first member. To do this, uncomment the two 	#
# lines below and replace the number to suit your need.				#
#										#
# cluster_info = elasticache.describe_cache_clusters()[                         #
#                'DescribeCacheClustersResponse'][                              #
#                'DescribeCacheClustersResult'][                                #
#                'CacheClusters'][0]                                            #
# pprint.pprint(cluster_info)                                                   #
#################################################################################

##########################################
# Create a cloud watch connection client.#
##########################################
cw_conn = boto.ec2.cloudwatch.connect_to_region(args.region)

################################################
# ElastiCache instances and Memory Dictionary #
################################################
# https://aws.amazon.com/elasticache/details/
cache_classes = {
   'cache.t2.small':    1.55,
   'cache.t2.micro':    0.555,
   'cache.t2.medium': 3.22,
   'cache.r4.xlarge': 25.05,
   'cache.r4.large': 12.3,
   'cache.r4.8xlarge': 203.26,
   'cache.r4.4xlarge': 101.38,
   'cache.r4.2xlarge': 50.47,
   'cache.r4.16xlarge': 407,
   'cache.r3.xlarge':   28.4,
   'cache.r3.large': 13.5,
   'cache.r3.8xlarge': 237,
   'cache.r3.4xlarge': 118,
   'cache.r3.2xlarge': 58.2,
   'cache.m4.xlarge':   14.28,
   'cache.m4.large': 6.42,
   'cache.m4.4xlarge': 60.78,
   'cache.m4.2xlarge': 29.7,
   'cache.m4.10xlarge': 154.64,
   'cache.m3.xlarge':   13.3,
   'cache.m3.medium': 2.78,
   'cache.m3.large': 6.05,
   'cache.m3.2xlarge': 27.9,
}

############################################
# Create an ElastiCache client connection.#
############################################
client = boto3.client('elasticache', region_name=args.region)

# Get instance type
response = client.describe_cache_clusters(CacheClusterId=args.instanceid)
# The 'response' is a dictionary of lists of dictionaries.
cache_instance_data = response.get('CacheClusters')

for attributes in cache_instance_data:
  cache_instance_type = attributes['CacheNodeType']

# Memory assigned to the instance type
allocated_memory = cache_classes.get(cache_instance_type)

###########################################################
# Define start and end times                              #
# Here we have give 5 minutes because that is the window  #
# we are using to calculate the average.                  #
# Note: The time should be in UTC format.                 #
###########################################################
start = datetime.datetime.now() - datetime.timedelta(seconds=300)
end = datetime.datetime.now()


#########################################################################################
# Use the cloudwatch connection and get metrics.                        		#
# ----------------------------------------------                        		#
#                                                                       		#
# 'data' - The results are captured in this variable. Type = object     		#
# '300'  - This is the time slice that we are refering, when we ask for 		#
#          the average value. This implies that "one output from AWS   		#
#          will cover 300 seconds (5 minutes)". This will match our     		#
#          start and end times. This also mean that we will get "one"   		#
#          output (very important. Nagios will only take one result)   		#
# 'start'- This will pass the start time.                               		#
# 'end'  - This will pass the end time.                                 		#
# 'CPUUtilization' - This is the matric that we are asking for from     		#
#                    CloudWatch.                                        		#
# 'AWS/AWS/ElastiCache' - This is the CloudWatch space/area where RDS stats reside. 	#
# 'Average' - We are defining that we won't the average for the matric. 		#
# 'CacheClusterId' - The unique identifier which we use to query. 			#
#########################################################################################


try:
    data = cw_conn.get_metric_statistics(
    300,
    start,
    end,
    'FreeableMemory',
    'AWS/ElastiCache',
    'Average',
    {'CacheClusterId': [args.instanceid]},
  )
except boto.exception.BotoServerError as err:
    print "WARNING: The instance specified {} was not found!".format(args.instanceid)

##################################################################################################
# Metrics                                                                                        #
# -------                                                                                        #
# There is a considerable amount of metrics available. You can vew them                          #
# all by uncommenting the code segment below.                                                    #
#                                                                                                #
# metrics = cw_conn.list_metrics(dimensions={'CacheClusterId': [ args.instanceid ] }) 		 #
# pprint.pprint(metrics)                                                                         #
#                                                                                                #
##################################################################################################

#################################################################################
# Metrics Debugging                                                             #
# -----------------                                                             #
# You might have a necessity to debug the output. The following might help.    #
#                                                                               #
# - If you wan't to view the raw output from the metrics query. Uncomment the  #
#   line below.                                                                 #
# pprint.pprint(data)                                                           #
#                                                                               #
#                                                                               #
# - The result is actually an 'object'. This object has some built in metods.   #
#   These methods are useful. For example you might have a 'get' metod that     #
#   saves you some code. You can uncomment the line below and view all the      #
#   methods and attributes.                                                     #
# pprint.pprint(dir(data))                                                      #
#################################################################################

#########################################################################################################
# Dissect the result                                                                                     #
# -----------------                                                                                     #
# The result that we get is a 'list' of 'dictonary' elements. Hence, we will                            #
# iterate over the list and get the first element. Then we will get the first value for "Average"       #
# This will help us to get just one "Average", if the time slot returns two "Average" values.           #
#########################################################################################################
item = []
item = data[0]
average_bytes = item["Average"]

# Convert bytes to gigabytes.
average = average_bytes / (1024 * 1024 * 1024)

# Calculate the percentage of available memory in comparison to the available amount.
memory_percentage = 100 / float(allocated_memory) * float(average)

#########################################################
# Print the output                                     #
# This is the final step. We do the following here.     #
# 1) Change the average vale to 'float' type.           #
# 2) Convert the defined value to 'float' type.         #
# 3) Compare the check vs actual.                       #
#########################################################
if float(memory_percentage) < args.critical:
  print "CRITICAL: Current AWS:ElastiCache FreeableMemory for {} is {}GB. [{}% of {}GB]".format(args.instanceid, average, memory_percentage, allocated_memory)
  sys.exit(2)
elif float(memory_percentage) < args.warning:
  print "WARNING: Current AWS:ElastiCache FreeableMemory for {} is {}GB. [{}% of {}GB]".format(args.instanceid, average,memory_percentage, allocated_memory)
  sys.exit(1)
else:
  print "OK: Current AWS:ElastiCache FreeableMemory for {} is {}GB. [{}% of {}GB]".format(args.instanceid, average, memory_percentage, allocated_memory)
