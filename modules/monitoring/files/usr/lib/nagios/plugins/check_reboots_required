#!/usr/bin/env ruby

def create_machines_hash
  return {} unless File.exist? '/etc/facter/facts.d/aws_environment.txt'

  machines_names_hash = Hash.new

  `/usr/local/bin/govuk_node_list --with-puppet-class`.each_line do |machine|
    hostname, name = machine.chomp.split(":")
    machines_names_hash[hostname] = name
  end

  return machines_names_hash
end

def hostname_with_node_name(hostname, machines_names_hash)
  name = machines_names_hash[hostname]

  if name
    "#{hostname} (#{name})"
  else
    hostname
  end
end

def print_hostnames(hostnames, machines_names_hash)
  hostnames.sort.each do |hostname|
    hydrated_name = hostname_with_node_name(hostname, machines_names_hash)
    puts "- #{hydrated_name}"
  end
end

all_machines = `/usr/local/bin/govuk_node_list`.split("\n")

out_of_hours_unsafe_machines = `/usr/local/bin/govuk_node_list --puppet-class govuk_safe_to_reboot::no`.split("\n")
in_hours_unsafe_machines = `/usr/local/bin/govuk_node_list --puppet-class govuk_safe_to_reboot::careful`.split("\n")
safe_machines = `/usr/local/bin/govuk_node_list --puppet-class govuk_safe_to_reboot::yes,govuk_safe_to_reboot::overnight`.split("\n")

machines_names_hash = create_machines_hash

# Safety check that we haven't added other safe to reboot options
# that we don't account for here.
unchecked_machines = all_machines - (out_of_hours_unsafe_machines + in_hours_unsafe_machines + safe_machines)

if unchecked_machines.length > 0
  puts "Some machines have an unknown `govuk_safe_to_reboot` value (should be one of `careful`, `no`, `yes` or `overnight`):"
  puts
  unchecked_machines.each do |machine|
    puts "- #{machine}"
  end
  exit 3
end

[out_of_hours_unsafe_machines, in_hours_unsafe_machines, safe_machines].each do |host_list|
  host_list.delete_if do |host|
    `/usr/lib/nagios/plugins/check_nrpe -H #{host} -t 20 -c check_reboot_required -u`
    $?.to_i == 0
  end
end

rebootable_machines = safe_machines + out_of_hours_unsafe_machines + in_hours_unsafe_machines

if rebootable_machines.length == 0
  puts 'No hosts need to be rebooted'
  exit 0
else
  puts "#{rebootable_machines.length} hosts need to be rebooted to apply updates"

  if out_of_hours_unsafe_machines.length > 0
    puts "\n"
    puts "These #{out_of_hours_unsafe_machines.length} hosts need to be rebooted manually out of hours:"
    print_hostnames(out_of_hours_unsafe_machines, machines_names_hash)
  end

  if in_hours_unsafe_machines.length > 0
    puts "\n"
    puts "These #{in_hours_unsafe_machines.length} hosts need to be rebooted manually in hours:"
    print_hostnames(in_hours_unsafe_machines, machines_names_hash)
  end

  if safe_machines.length > 0
    puts "\n"
    puts "These #{safe_machines.length} hosts should reboot automatically overnight (you'll need to manually step down any primary MongoDB machines):"
    print_hostnames(safe_machines, machines_names_hash)
  end

  exit 1
end
