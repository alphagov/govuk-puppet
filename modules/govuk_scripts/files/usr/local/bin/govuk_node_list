#!/usr/bin/env python

from __future__ import print_function

# NB: This script uses optparse, not argparse, for Python 2.6 compatibility and
# to avoid the need to depend on any other packages.
from optparse import OptionParser
import json
import random
import string
import sys
import urllib
import urllib2

def commasep_callback(option, opt, value, parser):
    setattr(parser.values, option.dest, value.split(','))

def main():
    opts, args = parser.parse_args()

    if opts.node_class:
        endpoint = 'nodes'
        host_key = 'name'

        if any('-' in c for c in opts.node_class):
            parser.error('Node classes should not use hyphens. Hint: Try an underscore')

        classes = [
            '["~", ["fact", "fqdn"], "^{0}-\\\d+\\\\."]'.format(string.replace(c, '_', '-'))
            for c in opts.node_class
        ]
        query = '["or", {0}]'.format(', '.join(classes))

    elif opts.puppet_class:
        endpoint = 'resources'
        host_key = 'certname'

        classes = [string.capwords(c, '::') for c in opts.puppet_class]

        classes = [
            '["=", "title", "{0}"]'.format(c)
            for c in classes
        ]
        class_query = '["or", {0}]'.format(', '.join(classes))
        query = '["and", ["=", "type", "Class"], {0}]'.format(class_query)

    else:
        endpoint = 'nodes'
        host_key = 'name'

        query = '["=", ["node", "active"], true]'

    if opts.dr_nodes is True:
        if opts.puppet_class:
           # Querying for resources cannot directly query for facts in the same request
           parser.error('Cannot list DR nodes with puppet classes')
        else:
           query = '["and", ["=", ["fact", "dr_node"], true], '+ query + ']'
    elif opts.dr_nodes is False:
        if opts.puppet_class:
           # Querying for resources cannot directly query for facts in the same request
           parser.error('Cannot list DR nodes with puppet classes')
        else:
           query = '["and", ["=", ["fact", "dr_node"], false], '+ query + ']'

    qs = urllib.urlencode({'query': query})
    res = urllib2.urlopen('http://puppetdb.cluster/v2/{0}?{1}'.format(endpoint, qs))
    hosts = json.load(res)

    if opts.single_node and len(hosts) > 0:
        hosts = [random.choice(hosts)]

    for host in hosts:
        print(host[host_key])

parser = OptionParser(description='List nodes in this environment from PuppetDB')

parser.add_option(
    '-c', '--node-class',
    '--class',
    dest='node_class',
    type='str',
    help='Restrict the output to nodes of the specified govuk_node_class. (e.g. "frontend,backend")',
    action='callback',
    callback=commasep_callback
)
parser.add_option(
    '-C', '--puppet-class',
    dest='puppet_class',
    type='str',
    help='Restrict the output to nodes of the specified Puppet class. (e.g. "nginx,ssh")',
    action='callback',
    callback=commasep_callback
)

parser.add_option(
    '-d', '--dr-only',
    help='Show only DR nodes',
    action="store_true",
    dest='dr_nodes',
)

parser.add_option(
    '-n', '--only-non-dr-nodes',
    help='Do not show DR nodes',
    action="store_false",
    dest='dr_nodes',
)

parser.add_option(
    '--single-node',
    help='Select a single node at random',
    action='store_true',
    dest='single_node',
)

if __name__ == '__main__':
    main()
