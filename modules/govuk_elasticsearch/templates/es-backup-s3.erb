#!/bin/bash

set -e

# Redirect stdout and stderr to syslog
exec 1> >(/usr/bin/logger -s -t $(basename $0)) 2>&1

S3_BUCKET=<%= @s3_bucket %>
AWS_REGION=<%= @aws_region %>
AWS_ACCESS_KEY_ID=<%= @aws_access_key_id %>
AWS_SECRET_ACCESS_KEY=<%= @aws_secret_access_key %>
ES_REPO=<%= @aws_repo %>
ES_INDICES=<%= @es_indices.join(',') %>


# indices: option below allows us to specify indexes in a comma separated list rather than snap-shooting everything. However we can set
# the $ES_REPO variable to '_all' to snapshot all indices.
#
# ignore_unavailable: option when true will cause indices that do not exist to be ignored during snapshot
#
# include_global_state: option will prevent the cluster global state from being stored as part of the snapshot.
# The entire snapshot will fail if one or more indices participating in the snapshot donâ€™t have all primary shards available


envdir <%= @env_dir %>/env.d curl --connect-timeout 10 -sS -XPUT "http://127.0.0.1:9200/_snapshot/"${ES_REPO}"?wait_for_completion=true&pretty" -d '{
  "type": "s3",
  "settings": {
    "bucket": "'"${S3_BUCKET}"'",
    "region": "'"${AWS_REGION}"'",
    "access_key": "'"${AWS_ACCESS_KEY_ID}"'",
    "secret_key": "'"${AWS_SECRET_ACCESS_KEY}"'"
  },
  "indices": "'"${ES_INDICES}"'",
  "ignore_unavailable": "true",
  "include_global_state": "false",
  "compress": "true",
  "server_side_encryption": "true"
  }' &> /dev/null

if [ $? -ne 0 ]; then
  echo "Snapshot Failed"
fi
