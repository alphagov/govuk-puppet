#!/usr/bin/env bash
set -eu

TARGETS="<%= @targets.flatten.join(' ') -%>"
MIRROR_ROOT="<%= @mirror_root -%>"
GOVUK_APP_DOMAIN=$(cat /etc/govuk/env.d/GOVUK_APP_DOMAIN)
STATIC_HOSTNAME="static.${GOVUK_APP_DOMAIN}"
GOVUK_WEBSITE_ROOT=$(cat /etc/govuk/env.d/GOVUK_WEBSITE_ROOT)
GOVUK_WEBSITE_DIR="${GOVUK_WEBSITE_ROOT##https://}"
PROGRAM_NAME=$(basename $0)
WEBSITE_MIRROR_DIR="${MIRROR_ROOT}/${GOVUK_WEBSITE_DIR}"

S5CMD_URL="https://github.com/peak/s5cmd/releases/download/v2.0.0/s5cmd_2.0.0_Linux-64bit.tar.gz"
S5CMD=/usr/local/bin/s5cmd

# Nagios defaults, assume failed
EXIT_CODE=1
EXIT_MESSAGE="WARNING: GOV.UK mirror synchronisation failed."

function log() {
  logger -p ${1} -t ${PROGRAM_NAME} "${2}"
}

function log_exit_status() {
  log "user.info" "$EXIT_MESSAGE Exit code was $?"
}

trap log_exit_status EXIT

function install_s5cmd() {
  tmpdir=$(mktemp -d)
  trap "rm -fr $tmpdir" EXIT INT QUIT TERM

  (
    cd "$tmpdir"
    curl -fsL "${S5CMD_URL}" | tar -zxf - s5cmd
    sudo cp s5cmd "${S5CMD}"
  )
}

if [ -z "${TARGETS}" ]; then
  log "user.info" "No mirror targets received"
fi

if [ ! -d "${MIRROR_ROOT}" ]; then
  log "user.info" "No mirror root specified or directory does not exist: ${MIRROR_ROOT}"
fi

if [ -z "${GOVUK_APP_DOMAIN}" ]; then
  log "user.info" "Couldn't find GOVUK_APP_DOMAIN"
fi

function get_error_page() {
  # Grab the 503 error page
  log "user.info" "Grabbing the latest error page"

  sudo -u deploy mkdir -p "${WEBSITE_MIRROR_DIR}/error/"
  sudo -u deploy curl -sf "https://${STATIC_HOSTNAME}/templates/503.html.erb" -o "${WEBSITE_MIRROR_DIR}/error/503.html"
}

function write_timestamps() {
  local upload_time=$(date +%s)

  cat <<EOF > timestamps.txt
upload_time=$upload_time
EOF

  sudo mv timestamps.txt "${WEBSITE_MIRROR_DIR}"
}

[[ -x "${S5CMD}" ]] || install_s5cmd
log "user.info" "Starting to synchronise GOV.UK to mirror: <%= @targets.flatten.join(' ') -%>"
get_error_page
write_timestamps
START_UPLOAD=$(date +%s%3N)

function do_sync() {
  # With s3cmd/s5cmd sync, the target needs to end with /
  [[ ${TARGET} == */ ]] || TARGET="${TARGET}/"

  /usr/local/bin/govuk_setenv s3_sync_mirror "${S5CMD}" --log error sync \
      --destination-region eu-west-2 \
      --exclude lost+found "${MIRROR_ROOT}/" "${TARGET}"
}

EXITCODE=0
for TARGET in ${TARGETS}; do
  log "user.info" "Started uploading to ${TARGET}"

  if do_sync; then
    log "user.info" "Finished uploading to mirror ${TARGET}"
  else
    EXITCODE=1
    log "user.crit" "Uploading mirror ${TARGET} failed with exit code: $EXITCODE"
  fi
done

STOP_UPLOAD=$(date +%s%3N)
DURATION_UPLOAD=$(expr $STOP_UPLOAD - $START_UPLOAD)

echo "govuk.app.sync_mirror.upload_duration:$DURATION_UPLOAD|ms" | nc -q 1 -u localhost 8125
log "user.info" "Finished synchronising to GOV.UK mirrors"

if [ $EXITCODE -eq 0 ]; then
  EXIT_CODE=0
  EXIT_MESSAGE="OK: GOV.UK mirror synchronised successfully (took ${DURATION_UPLOAD}ms )"
  printf "<%= @ipaddress_eth0 %>\t<%= @sync_service_desc %>\t${EXIT_CODE}\t${EXIT_MESSAGE}\n" | /usr/sbin/send_nsca -H <%= @alert_hostname %> >/dev/null
fi
exit $EXITCODE
