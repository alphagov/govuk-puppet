#!/bin/bash
# This script should be run with sudo
#
exec 1> >(/usr/bin/logger -s -t $(basename $0)) 2>&1

set -e

DATE=$(/bin/date +%F)
CURRENT_RESTORE=/tmp/mysql/$DATE
BASE_DIR=$CURRENT_RESTORE/basedir
INCR_DIR=$CURRENT_RESTORE/incremental

echo "Starting MySQL environment sync"

  /usr/local/bin/govuk_puppet -n mysql_restore -r "MySQL environment sync (by $0)" --disable

  # Create directories to restore into OR Purge {$BASE_DIR,$INCR_DIR} if they already exist
  if [[ ! -d "$CURRENT_RESTORE"; ! -d "$BASE_DIR"; ! -d "$INCR_DIR" ]]; then
    for dir in "$BASE_DIR" "$INCR_DIR"; do
      /bin/mkdir -p $dir
    done
  else
    for dir in "$BASE_DIR" "$INCR_DIR"; do
      /bin/rm -rf $dir/*
    done
  fi

  # Pull, then decrypt the latest backups from S3
  cd $BASE_DIR && /usr/bin/envdir <%= @env_sync_envdir %> /usr/local/bin/gof3r get --endpoint s3-<%= @aws_region -%>.amazonaws.com -b <%= @s3_bucket_name %> -k latest/base.xbcrypt | /usr/bin/xbstream -x -C $BASE_DIR

  for i in `/usr/bin/find . -iname "*\.xbcrypt"`; do
    /usr/bin/xbcrypt --encrypt-algo=AES256 --decrypt --encrypt-key="<%= @encryption_key %>" < $i > $(/usr/bin/dirname $i)/$(/usr/bin/basename $i .xbcrypt) && /bin/rm $i
  done

  cd $INCR_DIR && /usr/bin/envdir <%= @env_sync_envdir %> /usr/local/bin/gof3r get --endpoint s3-<%= @aws_region -%>.amazonaws.com -b <%= @s3_bucket_name %> -k latest/incremental.xbcrypt | /usr/bin/xbstream -x -C $INCR_DIR

  for i in `/usr/bin/find . -iname "*\.xbcrypt"`; do
    /usr/bin/xbcrypt --encrypt-algo=AES256 --decrypt --encrypt-key="<%= @encryption_key %>" < $i > $(/usr/bin/dirname $i)/$(/usr/bin/basename $i .xbcrypt) && /bin/rm $i
  done

  # Decompress the backups
  for dir in "$BASE_DIR" "$INCR_DIR"; do
    /usr/bin/innobackupex --decompress $dir --parallel=4   # "GO FAST....." Use four threads if available 
  done

  # Prepare the data and apply the logs
  /usr/bin/innobackupex --apply-log --redo-only $BASE_DIR
  /usr/bin/innobackupex --apply-log $BASE_DIR --incremental-dir=$INCR_DIR

  # Stop the service before we copy the data across
  /usr/sbin/service mysql stop

  # Ensure that it's definitely not running before we move data directories
  if /bin/pidof mysqld; then
    echo "MySQL still running, exiting"
    exit 1
  fi

  # Copy the current directory to a backup location; we cannot move this if
  # the directory is a mount point so we need to copy
  echo "Backing up current dir"
  TEMPDIR=mysql-$(date '+%s')
  /bin/cp -R /var/lib/mysql /var/lib/$TEMPDIR

  # Remove contents of the datadir
  /bin/rm -rf /var/lib/mysql/*

  # Copy the restored data
  /usr/bin/innobackupex --copy-back $BASE_DIR

  # Update to correct permissions
  echo "Correcting permissions"
  /bin/chown -R mysql:mysql /var/lib/mysql

  # Start the service
  /usr/sbin/service mysql start

  # Clean up
  echo "Cleaning up"
  /bin/rm -rf /var/lib/$TEMPDIR $BASE_DIR $INCR_DIR

  # Re-enable Puppet and run it to ensure passwords are updated
  /usr/local/bin/govuk_puppet -n mysql_restore --enable && /usr/local/bin/govuk_puppet

  echo "MySQL environment sync completely successfully"
