# Varnish will append its default logic to any overwritten subroutine. If
# you're not sure what that is, see here:
#
#   https://www.varnish-cache.org/trac/browser/bin/varnishd/default.vcl?rev=2.0

# Backends
  backend upstream {
    .host = "127.0.0.1";
    .port = "<%= @upstream_port -%>";
    .first_byte_timeout = 20s;
    .between_bytes_timeout = 20s;
  }

acl purge_acl {
  "localhost";
}

sub vcl_recv {
  unset req.http.GOVUK-Request-Id;
  unset req.http.GOVUK-Original-Url;
  set req.http.GOVUK-Original-Url = req.url;

  set req.backend = upstream;

  # Use the error keyword here as serving a synthetic response isn't supported in vcl_recv
  # 668 is a custom HTTP error code
  if (req.url == "/__varnish_check__") {
    error 668 "OK";
  }

  # https://www.gov.uk/foo/ -> https://www.gov.uk/foo
  # vcl_error completes the redirect
  # Don't redirect "/" to "".
  if (req.url ~ "(.+)/$") {
    set req.http.x-Redir-Url = regsub(req.url, "^(.+)/$", "\1");
    error 667 req.http.x-Redir-Url;
  }

  # https://www.gov.uk/foo. -> https://www.gov.uk/foo
  # Ignores URLs with query strings
  # vcl_error completes the redirect
  if (req.url ~ "^[^?]+\.$") {
    set req.http.x-Redir-Url = regsub(req.url, "^(.*)\.$", "\1");
    error 667 req.http.x-Redir-Url;
  }

  # normalize Accept-Encoding header
  if (req.http.Accept-Encoding) {
    if (req.url ~ "\.(jpeg|jpg|png|gif|gz|tgz|bz2|tbz|zip|flv|pdf|mp3|ogg)$") {
      remove req.http.Accept-Encoding; # already compressed
    }
    elsif (req.http.Accept-Encoding ~ "gzip") {
      set req.http.Accept-Encoding = "gzip";
    }
    elsif (req.http.Accept-Encoding ~ "deflate") {
      set req.http.Accept-Encoding = "deflate";
    }
    else {
      remove req.http.Accept-Encoding;
    }
  }

  # Don't waste our internal cache on uploaded assets (large) which are
  # typically cached for a long time at the CDN edge.
  if (req.url ~ "^/government/uploads/") {
    if (req.request == "PURGE") {
      error 200 "Path excluded from varnish";
    } else {
      return(pass);
    }
  }

  # Serve stale period. This is the period for which Varnish is *allowed* to
  # serve stale content beyond the object TTL in the event of errors from
  # origin.
  set req.grace = 6h;

  <% if @strip_cookies %>
  # Strip cookies from inbound requests. Corresponding rule in vcl_fetch{}
  # For simplicity and security most applications should not use cookies.
  # With the exception of:
  #   - Licensing application
  #   - AB Testing cookies in any application
  if (req.url !~ "^/apply-for-a-licence") {
    if (req.http.Cookie) {
      # Strip out any cookies which are not whitelisted using in-place regex
      # substitution, since it is the only process available in VCL.

      # Prepend a semicolon to make the first cookie consistent with subsequent
      # cookies, which makes it easier to search for whitelisted cookies
      set req.http.Cookie = ";" + req.http.Cookie;

      # Remove any whitespace, so that whitespace can be added as a maker in
      # later steps
      set req.http.Cookie = regsuball(req.http.Cookie, "\s", "");

      # Prepend a space to any whitelisted cookies (which are matched case-
      # insensitively) as a marker to use in later steps
      # TODO: Read from a cookie whitelist in a config file, rather than hard-coding allowed cookies
      set req.http.Cookie = regsuball(req.http.Cookie, "(?i);abtest-example=", "; abtest-example=");

      # Delete all cookies which do not have the space marker, i.e. those which
      # are not whitelisted
      set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ]+", ";");

      # Clean up the extraneous semicolons and whitespace which were added
      # earlier or are left-over from deleting non-whitelisted cookies
      set req.http.Cookie = regsuball(req.http.Cookie, "^;|\s|;$", "");

      if (req.http.Cookie == "") {
        unset req.http.Cookie;
      }
    }
  }
  <% end %>

  # purge individual URLs from the cache
  if (req.request == "PURGE") {
    if (!client.ip ~ purge_acl) {
      error 405 "Not allowed";
    } else {
      ban("req.url == " + req.url);
      error 200 "Purged";
    }
  }

  # Usually, varnish would refuse to cache requests with an Authorization
  # header. We don't mind, so return lookup.
  if (req.request == "GET" || req.request == "HEAD") {
    if (req.http.Authorization) {
      return(lookup);
    }
  }
}

sub vcl_fetch {
  # Serve stale period. This is the period for which Varnish is allowed to
  # keep an object, beyond its specified TTL. It should always be as long or
  # longer than req.grace in vcl_recv.
  set beresp.grace = 6h;

  # hide some internal headers
  unset beresp.http.X-Rack-Cache;
  unset beresp.http.X-Runtime;

  <% if @strip_cookies %>
  # Strip cookies (except A/B testing or licence cookies) from outbound
  # requests. Corresponding rule in vcl_recv{}
  if (req.url !~ "^/apply-for-a-licence") {
    if (beresp.http.Set-Cookie) {
      set beresp.http.Set-Cookie = ";" + beresp.http.Set-Cookie;
      set beresp.http.Set-Cookie = regsuball(beresp.http.Set-Cookie, "\s", "");
      set beresp.http.Set-Cookie = regsuball(beresp.http.Set-Cookie, "(?i);abtest-example=", "; abtest-example=");
      set beresp.http.Set-Cookie = regsuball(beresp.http.Set-Cookie, ";[^ ]+", ";");
      set beresp.http.Set-Cookie = regsuball(beresp.http.Set-Cookie, "^;|\s|;$", "");

      if (beresp.http.Set-Cookie == "") {
        unset beresp.http.Set-Cookie;
      }
    }
  }
  <% end %>

  # Licensify sends custom 500 errors, and we need to send No-Fallback: true
  # to prevent the CDN from falling back to the mirror site.
  #
  # FIXME: This would be better implemented in the app or per-app Nginx
  # vhost. Require `more_headers` because add_header` can't be used for
  # error responses.
  if (req.url ~ "^/apply-for-a-licence") {
    set beresp.http.No-Fallback = "true";
  }

  # Don't cache 5xx errors from backends. Let upstreams retry and
  # downstreams present their own error pages if necessary.
  if (beresp.status >= 500 && beresp.status <= 504) {
    # Don't cache the decision to not cache
    set beresp.ttl = 0s;
    return(hit_for_pass);
  }

  # If the backend says no-cache or no-store, we should not cache
  if (beresp.http.cache-control ~ "no-cache" || beresp.http.cache-control ~ "no-store") {
    # Don't cache the decision to not cache
    set beresp.ttl = 0s;
    return(hit_for_pass);
  }

  # If neither a Cache-Control or Expires header is provided, Varnish will
  # automatically set the TTL to the default_ttl. This *won't* however, set
  # this for downstreams. Explicitly set a C-C header if we intercept a
  # response with no useable caching information.
  if (!beresp.http.Cache-Control && !beresp.http.Expires) {
    set beresp.http.X-Varnish-Defaulted = "1";
    set beresp.http.Cache-Control = "max-age=<%= scope.lookupvar('varnish::default_ttl') %>";
  }

  # Allow cached authorized requests
  if (req.http.Authorization) {
    return(deliver);
  }

  # Explicitly return to prevent falling through to Varnish's default behaviour
  # for handling Set-Cookie, which marks them hit_for_pass (prevents caching).
  # See:
  # https://www.varnish-cache.org/trac/browser/bin/varnishd/default.vcl?rev=varnish-3.0.2#L103
  #
  # See the last paragraph of section 8 of RFC 7234; using Set-Cookie does not
  # prohibit caching. Instead, we rely on the application to set an appropriate
  # Cache-Control header.
  # http://tools.ietf.org/html/rfc7234#section-8
  #
  # Note that we strip out Set-Cookie using a whilelist above.
  if (beresp.http.Set-Cookie) {
    return(deliver);
  }
}

sub vcl_hash {
  hash_data(req.url);
  return(hash);
}

sub vcl_deliver {
  # Add a custom header to indicate whether we hit the cache or not
  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT";
  } else {
    set resp.http.X-Cache = "MISS";
  }
}

sub vcl_error {
  # 667 errors are our internal "redirect wanted" errors
  # They're raised in vcl_recv.
  if (obj.status == 667) {
    set obj.http.Location = obj.response;
    set obj.status = 301;
    return(deliver);
  }

  # 668 errors are our internal 'errors' for the /__varnish_check__ health
  # check. They're raised in vcl_recv because vcl_recv can't provide synthetic content.
  if (obj.status == 668) {
    set obj.http.Content-Type = "text/plain";
    set obj.status = 200;
    synthetic obj.response + {"
"}; # Add newline to end of response
    return(deliver);
  }
}
