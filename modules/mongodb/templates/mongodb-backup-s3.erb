#!/bin/bash

set -e

# Redirect stdout and stderr to syslog
exec 1> >(/usr/bin/logger -s -t $(basename $0)) 2>&1

# The default Icinga passive alert assumes that the script failed
NAGIOS_CODE=2
NAGIOS_MESSAGE="CRITICAL: Mongodb backup push to S3 failed"
BACKUP_NODE=<%= @backup_node %>
BACKUP_DIR=<%= @backup_dir %>
BACKUP_FILE=mongodump-<%= @fqdn %>.$(date +%F_%T).tar.gz.gpg
KEY_FINGERPRINT=<%= @private_gpg_key_fingerprint %>
S3_BUCKET=<%= @s3_bucket %>
S3_BUCKET_DAILY=<%= @s3_bucket_daily %>

# Triggered whenever this script exits, successful or otherwise. The values
# of CODE/MESSAGE will be taken from that point in time.
function nagios_passive () {
printf "<%= @ipaddress %>\t<%= @service_desc %>\t${NAGIOS_CODE}\t${NAGIOS_MESSAGE}\n" | /usr/sbin/send_nsca -H alert.cluster >/dev/null
}

trap nagios_passive EXIT

# Backup mongodb
TIME="$(date +%s)"
/usr/bin/mongodump -h $BACKUP_NODE -o $BACKUP_DIR
TIME="$(($(date +%s)-TIME))"
printf "BACKUP COMPLETED IN: ${TIME}s\n"

# Compress and encrypt backup
TIME="$(date +%s)"
(/bin/tar cvz $BACKUP_DIR | /usr/bin/gpg -e -o $BACKUP_DIR/$BACKUP_FILE -r $KEY_FINGERPRINT)
TIME="$(($(date +%s)-TIME))"
printf "COMPRESSION AND ENCRYPTION FINISHED IN: ${TIME}s\n"

# Upload backup to s3 bucket
TIME="$(date +%s)"
if [ $1 == "daily" ]; then

    /usr/bin/envdir <%= @env_dir %>/env.d /usr/local/bin/s3cmd put $BACKUP_DIR/mongodump-* s3://$S3_BUCKET_DAILY --quiet
else
    /usr/bin/envdir <%= @env_dir %>/env.d /usr/local/bin/s3cmd put $BACKUP_DIR/mongodump-* s3://$S3_BUCKET --quiet
fi
TIME="$(($(date +%s)-TIME))"
printf "BACKUP UPLOADED IN: ${TIME}s\n"

# Tidy up
/bin/rm -f $BACKUP_DIR/mongodump-*

if [ $? == 0 ]; then
  STATUS=0
else
  STATUS=1
fi

if [ $STATUS -eq 0 ]; then
NAGIOS_CODE=0
NAGIOS_MESSAGE="OK: Mongodb backup push to S3 succeeded"
fi

exit $STATUS
