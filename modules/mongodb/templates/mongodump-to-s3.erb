#!/bin/bash
#
# This script takes a mongodump, copies it to an S3 bucket,
# and cleans up afterward.
#
# At a set time it will push the backup to a different location
# so we can set shorter expiration on the regular backups, and
# keep one backup everyday for longer.
#
set -e

exec 1> >(/usr/bin/logger -s -t $(basename $0)) 2>&1

NAGIOS_CODE=2
NAGIOS_MESSAGE='CRITICAL: MongoDB backup to S3 failed'

AWS=$(command -v aws)
# Triggered whenever this script exits, successful or otherwise. The values
# # of CODE/MESSAGE will be taken from that point in time.
function nagios_passive () {
  printf "<%= @ipaddress_eth0 %>\t<%= @service_desc %>\t${NAGIOS_CODE}\t${NAGIOS_MESSAGE}\n" | /usr/sbin/send_nsca -H <%= @alert_hostname %> >/dev/null
}

function housekeeping() {
  /bin/rm -rf <%= @backup_dir -%>/*mongodump*
}

function exit_trap() {
  housekeeping
  nagios_passive
}

trap exit_trap EXIT

BUCKET_KEY='mongodb/daily/<%= @aws_migration -%>'
echo "Creating 'daily' backup for long term storage"

# Create a list of members in the cluster.
members=( $(mongo --quiet --eval 'rs.conf().members.forEach(function(x){ print(x.host) })') )

# Check each member to see if it's a secondary and return it.
if [ ${#members[@]} -gt 1 ]; then
  for member in "${members[@]}"; do
    is_secondary=$(mongo --quiet --host "$member" --eval 'rs.isMaster().secondary')
      case "$is_secondary" in
        'true')     # First secondary wins ...
           secondary=$member
           break
        ;;
        'false')    # Skip particular member if it is a Primary.
           continue
	;;
        *)          # Skip irrelevant entries.  Should not be any anyway ...
           continue
        ;;
      esac
  done
else
 echo "ERROR: We could not find a secondary mongo instance."
 exit 1
fi

# Get my member name
my_name=( $( mongo --quiet --eval 'rs.isMaster().me') )

# Only run if I am the elected member.
if [ "${my_name}" == "${secondary}" ]
 then
  echo "Starting backup"
  /usr/bin/mongodump -o <%= @backup_dir -%>/mongodump >/dev/null

  echo "Compressing mongodump to tarball"
  tar -zcvf <%= @backup_dir -%>/mongodump.tgz <%= @backup_dir -%>/mongodump

  echo "Uploading mongodump to S3"
  $AWS s3 --quiet --region <%= @aws_region -%> cp <%= @backup_dir -%>/mongodump.tgz s3://<%= @bucket -%>/${BUCKET_KEY}/mongodump-$(date +%F_%H%M).tgz --sse

  echo "Completed successfully"
  NAGIOS_CODE=0
  NAGIOS_MESSAGE="OK: MongoDB backup to S3 succeeded"
else
  echo "The secondary instance has a problem: skipping backup"
  NAGIOS_CODE=0
  NAGIOS_MESSAGE="OK: The secondary instance has a problem"
fi
